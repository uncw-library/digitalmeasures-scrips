#!/usr/bin/perl
use FindBin qw($Bin);
use lib $Bin;
use Getopt::Std;
use FileHandle;
use POSIX ":sys_wait_h";
use POSIX qw( strftime );
use Fcntl qw/:DEFAULT :flock/;
use English;
$g_T0 = time();
$g_STARTED_AT = strftime("%y\%m%d%", localtime($g_T0) );
if(scalar(@ARGV) == 0){
    usage();
    exit 0;
}
getopts('cCdD:n:t:TXs:u');
if($opt_u){
    usage();
    exit 0;
}
#DOCSTART
#
#  %Z%%M%  $Revision: %I%, %G% %U% $
#
#  Name:  %M%
#  Desc:
#  HISTORY: written by Joseph Mc Enerney 2006
#  based on prior work
#
#
#
#DOCEND

@hexchars = split //,"0123456789ABCDEF";


sub hexcheck{
    my($s) = @_;
    my @tidbits = split //, $s;
    if(scalar(@tidbits) > 8){
	print "$s is too long, 8 hex chars expected.\n";
	return "_ERROR_";
    }
    for(my $n=0;$n < scalar(@tidbits);$n++){
	my $ok = 0;
	for(my $m=0; $m < 16; $m++){
	    if(uc($tidbits[$n]) eq $hexchars[$m]){
		$ok = 1;
		last;
	    }
	}
	if($ok != 1){
	    print "$s is not a hex string, 8 hex chars expected.\n";
	    return "_ERROR_";
	}
    }
    # pad with leading zeros
    if(scalar(@tidbits) < 8){
	$s = "0"x(8-scalar(@tidbits)) . $s;
    }
    return uc($s);

}

$twist = $opt_t?$opt_t:'';

$f = shift;

$N = $opt_n?$opt_n:1;

$inode = myinode($f);

$prefix = $twist . sprintf("%04lX",$REAL_USER_ID) . $inode;
$prefix .= sprintf('%X', $g_STARTED_AT) if $opt_T;

if($opt_s ne ''){
    my $s = hexcheck(($opt_d?sprintf("%lx",$opt_s):$opt_s));
    exit 1 if($s eq "_ERROR_");
    setUno($f,$s);
    printf("%s\n",$s);
} elsif($opt_c){
    my $next .= curUno($f);
    if($opt_C){
	if($opt_D ne ''){
	    printf("%0*d\n",$opt_D,hex($next));
	} else {
	    print $next . "\n";
	}
    } else {
	print $prefix . $next . "\n";
    }
} else {
    print "<?xml version='1.0'?>\n<Mapping>\n" if $opt_X;
    for(my $i=1;$i<=$N;$i++){
	my $next = nextUno($f);
	if($opt_X){
	    print "<map n='$i' nuno='$prefix$next'/>\n";
	} else {
	    if($opt_C){
		if($opt_D ne ''){
		    printf("%0*d\n",$opt_D,hex($next));
		} else {
		    print $next . "\n";
		}
	    } else {
		print $prefix . $next . "\n";
	    }
	}
    }
    print "</Mapping>\n" if $opt_X;
}

sub myinode {
    my($file) = @_;
    if(!defined($file)){
        $file = "./.Uno";
    }
    if( -e $file && (!-r _ || !-w _)){
	print STDERR "$file not useable.\n";
	return "00000000";
    }
    qx(touch $file) if ! -e _ ;
    my $inode;

    ($inode) = split /\s/,qx(ls -i $file);
    return sprintf("%07lX",$inode);
}
sub nextUno {
    my($file) = @_;
    my($res,$n,$m,$ctr,$inode);
    if(!defined($file)){
        $file = "./.Uno";
    }
    #print LOGIT "Uno: $file\n";
    if( -e $file && !(-r _ || !-w _)){
	return "00000000";
    }
 
    sysopen(CTR,$file, O_RDWR | O_CREAT);
    autoflush CTR 1;
    flock(CTR, LOCK_EX);
    $ctr = <CTR> || "00000000";
    seek (CTR,0,0);
    $n = $m = hex( $ctr );
    
    $n++;
    #print LOGIT "Uno: $n\n";
    $n = 0 if($n >= 0xFFFFFFFF);
    printf CTR "%08lX",$n;
    close CTR;
    return sprintf("%08lX",$m);
}
sub setUno {
    my($file,$n) = @_;
    my($res);
    if(!defined($file)){
        $file = "./.Uno";
    }
    sysopen(CTR,$file, O_RDWR | O_CREAT);
    autoflush CTR 1;
    flock(CTR, LOCK_EX);
    print CTR $n;
    close CTR;
}
sub curUno {
    my($file) = @_;
    my($res,$n,$m,$ctr);
    if(!defined($file)){
        $file = "./.Uno";
    }
    #print LOGIT "Uno: $file\n";
    if( -e $file && (!-r _ || !-w _)){
	return "00000000";
    }
    sysopen(CTR,$file, O_RDWR | O_CREAT);
    flock(CTR, LOCK_EX);
    $ctr = <CTR> || "00000000";
    seek (CTR,0,0);
    $n = $m = hex( $ctr );
    close CTR;
    return sprintf("%08lX",$m);

}

sub usage {
    print "nuno [options] filepath\n";
    print "-c            return current value no increment\n";
    print "-C            return only the counter value - no prefix\n";
    print "-d            decimal mode\n";
    print "-D width      0 pad return value in decimal to 'width'\n";
    print "-n count      create count unos\n";
    print "-s start      starting value of counter\n";
    print "-t tag        adds 'tag' to std prefix\n";
    print "-T            adds a time stamp to std prefix\n";
    print "-X            output an xml file of (-n count) unos\n";

    print <<"DETAILS";
Nuno creates and maintains a 8 hex digit counter in a file.
The counter is incremented by 1 each time nuno is called except
when being set as described below.

If nuno is called without a file argument a file named '.Uno'
is used. If need be the file is created in the current working 
directory and is initialized to '00000000' unless the -s option 
is also used. In that case, the start value given is used and 
if need be converted to hex first (e.g. when -d is used as well). 

Nuno also creates a standard prefix that consists 
of the inode (in hex) of the counter file concatenated with the real
user id (in hex) of the user invoking this program. The '-t tag' option
can be used to add to this standard prefix. In addition, a hex time stamp
can be added as well. The combined return value is schematically shown
below with square brackets indicating the optional parts.

    [<user-prefix>]<real-uid><inode>[<time-stamp>]<counter-value>
                   |   std prefix  |

Examples Default file (.Uno):
example : initialize and return first value with prefix
command : nuno
result  : 0203F44001300000000
example : set the counter to a hex value
command : nuno -s FFFF
result  : 0000FFFF
example : show that value (and increment counter)
command : nuno
result  : 0203F4400130000FFFF
example : show the next value with user prefix and increment
command : nuno -t MYUNO-
result  : MYUNO-0203F44001300010000
example : show the next value adding time stamp
command : nuno -t MYUNO- -T
result  : MYUNO-0203F4400131D7E700010001
example : just show std prefix and current value (no increment)
command : nuno -c
result  : 0203F44001300010002
example : just show std prefix and current value (no increment)
command : nuno -c
result  : 0203F44001300010002
example : just show current value
command : nuno -cC
result  : 00010002
example : current value in decimal padded
command : nuno -cCD 6
result  : 065538
example : set counter to 1234 decimal
command : nuno -ds 1234
result  : 000004D2
example : current value in decimal padded
command : nuno -cCD 6
result  : 001234
example : return xml of unos
command : nuno -Xn 3
result  : <?xml version='1.0'?>
          <Mapping>
          <map n='1' nuno='0203F440013000004D2'/>
          <map n='2' nuno='0203F440013000004D3'/>
          <map n='3' nuno='0203F440013000004D4'/>
          </Mapping>

DETAILS

}

1;
